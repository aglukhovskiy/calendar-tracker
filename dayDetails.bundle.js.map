{"version":3,"file":"dayDetails.bundle.js","mappings":"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","sources":["webpack://stopwatch-widget-extension/./day_details.js"],"sourcesContent":["class DayDetails {\n    constructor() {\n        this.storageKey = 'allDayDetails'; // Единый ключ для всех деталей дня\n        this.currentDate = null; // Дата, для которой открыта модалка\n        this.initializeEventListeners();\n    }\n\n    initializeEventListeners() {\n        // Обработчик для открытия модального окна (остается в main_page.js или вешается им)\n        // Этот класс будет предоставлять метод openDayDetailModal\n\n        const saveButton = document.getElementById('day-detail-save');\n        const cancelButton = document.getElementById('day-detail-cancel');\n        // Кнопка закрытия из main_page.js должна закрывать и эту модалку\n        // const closeButton = document.querySelector('#day-detail-modal .close-modal'); // Уже есть в main_page.js\n\n        if (saveButton) {\n            saveButton.addEventListener('click', () => this.saveDayDetails());\n        }\n        if (cancelButton) {\n            cancelButton.addEventListener('click', () => this.closeDayDetailModal());\n        }\n        \n        // Обновление общей суммы калорий при вводе\n        ['calories-morning', 'calories-afternoon', 'calories-evening'].forEach(id => {\n            const input = document.getElementById(id);\n            if (input) {\n                input.addEventListener('input', () => this.updateTotalCaloriesDisplay());\n            }\n        });\n    }\n\n    openDayDetailModal(date) {\n        this.currentDate = date;\n        const modal = document.getElementById('day-detail-modal');\n        const header = document.getElementById('day-detail-header');\n        \n        chrome.storage.local.get(this.storageKey, (result) => {\n            const allDayDetails = result[this.storageKey] || {};\n            const dayData = allDayDetails[date] || { calories: { morning: 0, afternoon: 0, evening: 0 }, comment: '' };\n\n            // Убедимся, что дата парсится корректно (добавляем время, чтобы избежать проблем с часовыми поясами)\n            const dateObj = new Date(date + \"T00:00:00\"); \n            header.textContent = `Детали дня: ${dateObj.toLocaleDateString('ru-RU', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}`;\n\n            document.getElementById('calories-morning').value = dayData.calories.morning || 0;\n            document.getElementById('calories-afternoon').value = dayData.calories.afternoon || 0;\n            document.getElementById('calories-evening').value = dayData.calories.evening || 0;\n            document.getElementById('day-comment').value = dayData.comment || '';\n\n            this.updateTotalCaloriesDisplay(); \n            modal.style.display = 'block';\n        });\n    }\n\n    closeDayDetailModal() {\n        const modal = document.getElementById('day-detail-modal');\n        modal.style.display = 'none';\n        this.currentDate = null;\n    }\n\n    saveDayDetails() {\n        if (!this.currentDate) return;\n        const date = this.currentDate;\n\n        chrome.storage.local.get(this.storageKey, (result) => {\n            const allDayDetails = result[this.storageKey] || {};\n\n            allDayDetails[date] = {\n                calories: {\n                    morning: parseInt(document.getElementById('calories-morning').value) || 0,\n                    afternoon: parseInt(document.getElementById('calories-afternoon').value) || 0,\n                    evening: parseInt(document.getElementById('calories-evening').value) || 0\n                },\n                comment: document.getElementById('day-comment').value.trim()\n            };\n\n            chrome.storage.local.set({ [this.storageKey]: allDayDetails }, () => {\n                // console.log('Day details saved for', date);\n                // main_page.js должен отреагировать на chrome.storage.onChanged и обновить UI\n                this.closeDayDetailModal();\n            });\n        });\n    }\n\n    updateTotalCaloriesDisplay() {\n        // Эта функция может понадобиться, если в HTML модального окна есть место для отображения суммы\n        // Например, <span id=\"total-calories-value-in-modal\">0</span>\n        const totalCaloriesEl = document.getElementById('total-calories-value-in-modal'); // Пример ID\n        if (!totalCaloriesEl && !document.getElementById('calories-morning')) return; // Выходим, если нет элементов\n\n        const morning = parseInt(document.getElementById('calories-morning').value) || 0;\n        const afternoon = parseInt(document.getElementById('calories-afternoon').value) || 0;\n        const evening = parseInt(document.getElementById('calories-evening').value) || 0;\n        const total = morning + afternoon + evening;\n        \n        if (totalCaloriesEl) {\n            totalCaloriesEl.textContent = total;\n        }\n    }\n}\n\n// Инициализация объекта DayDetails будет производиться из main_page.js\n// после полной загрузки DOM и первоначального рендеринга.\n// Убираем DOMContentLoaded listener отсюда, чтобы избежать конфликтов.\n"],"names":["DayDetails","constructor","storageKey","currentDate","initializeEventListeners","saveButton","document","getElementById","cancelButton","addEventListener","saveDayDetails","closeDayDetailModal","forEach","id","input","updateTotalCaloriesDisplay","openDayDetailModal","date","modal","header","chrome","storage","local","get","result","allDayDetails","dayData","calories","morning","afternoon","evening","comment","dateObj","Date","textContent","toLocaleDateString","weekday","year","month","day","value","style","display","parseInt","trim","set","totalCaloriesEl","total"],"sourceRoot":""}