<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Секундомер</title>
  <link rel="stylesheet" href="popup.css">
</head>
<body>
  <div id="timer-display">00:00</div>
  <select id="project-select"><option value="">-- Проект --</option></select>
  <div id="controls">
    <button id="start-btn">Старт</button>
    <button id="pause-btn">Пауза</button>
    <button id="stop-btn">Стоп</button>
  </div>
  <button id="calendar-btn">Открыть календарь</button>
  <script src="popup.js"></script>
</body>
</html>


body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 0; background: #f7f9fb; color: #222; min-width: 260px;}
#timer-display { font-size: 2em; text-align: center; margin: 20px 0 10px; color: #1976d2; background: #e3f0ff; border-radius: 8px; padding: 8px 0; }
#controls { display: flex; justify-content: center; gap: 8px; margin-bottom: 14px; }
#controls button { min-width: 48px; border: 1px solid #b6d4fa; background: #e3f0ff; color: #1976d2; border-radius: 6px; padding: 9px; font-weight: 500; transition: background 0.2s, color 0.2s, border 0.2s; }
#controls button:hover { background: #d0e7ff; color: #125ea7; border-color: #90c2f7; }
#controls button:disabled { opacity: 0.5; background: #f0f0f0; color: #b0b0b0; border-color: #e0e0e0; }
#project-select { width: 90%; display: block; margin: 0 auto 12px auto; padding: 4px; background: #fff; color: #1976d2; border-radius: 6px; border: 1px solid #b6d4fa; font-weight: 500; }
#calendar-btn {
    min-width: 48px;
    border: 1px solid #b6d4fa;
    background: #e3f0ff;
    color: #1976d2;
    border-radius: 6px;
    padding: 9px;
    font-weight: 500;
    transition: background 0.2s, color 0.2s, border 0.2s;
    margin: 0 auto;
    display: block;
}
#calendar-btn:hover {
    background: #d0e7ff;
    color: #125ea7;
    border-color: #90c2f7;
}

document.addEventListener('DOMContentLoaded', function() {
    const timerDisplay = document.getElementById('timer-display');
    const startBtn = document.getElementById('start-btn');
    const pauseBtn = document.getElementById('pause-btn');
    const stopBtn = document.getElementById('stop-btn');
    const projectSelect = document.getElementById('project-select');
    const calendarBtn = document.getElementById('calendar-btn');

    let projects = [];
    let stopwatch = { isRunning: false, startTimestamp: null, elapsed: 0, liveEventId: null, projectId: null };
    let interval = null;

    function updateDisplay() {
        let ms = stopwatch.elapsed;
        if(stopwatch.isRunning && stopwatch.startTimestamp)
            ms += Date.now() - stopwatch.startTimestamp;
        let sec = Math.floor(ms/1000), min = Math.floor(sec/60);
        sec = sec%60;
        timerDisplay.textContent = `${min.toString().padStart(2,'0')}:${sec.toString().padStart(2,'0')}`;
        timerDisplay.style.color='#fff';
        startBtn.disabled = stopwatch.isRunning || !projectSelect.value;
        pauseBtn.disabled = !stopwatch.isRunning;
        stopBtn.disabled = (!stopwatch.isRunning && stopwatch.elapsed===0);
    }

    function loadProjects() {
        chrome.storage.local.get(['projects','selectedProjectId'], res => {
            projects = res.projects||[];
            projectSelect.innerHTML = `<option value="">-- Проект --</option>`;
            projects.forEach(prj=>{
                let opt = document.createElement('option');
                opt.value = prj.id; opt.textContent = prj.name;
                projectSelect.appendChild(opt);
            });
            if(res.selectedProjectId) projectSelect.value=res.selectedProjectId;
            updateDisplay();
        });
    }

    function loadStopwatch() {
        chrome.storage.local.get('stopwatch', res => {
            if(res.stopwatch) stopwatch = {...stopwatch, ...res.stopwatch};
            updateDisplay();
        });
    }

    chrome.storage.onChanged.addListener((changes, area) => {
        if(area==="local" && changes.stopwatch) loadStopwatch();
        if(area==="local" && changes.projects) loadProjects();
    });

    startBtn.onclick = function() {
        let prj = projectSelect.value;
        if (!prj) { alert("Выберите проект!"); return; }
        chrome.storage.local.set({selectedProjectId:prj}, ()=> {
            chrome.storage.local.get(['stopwatch', 'calendarEvents', 'projects'], res=>{
                let sw = res.stopwatch||{};
                if (sw.isRunning) return;
                const projectsArr = res.projects || [];
                const project = projectsArr.find(p => p.id === prj);
                const now = new Date();
                const pad = x => x.toString().padStart(2, '0');
                const localIso = dt => dt.getFullYear() + '-' + pad(dt.getMonth()+1) + '-' + pad(dt.getDate()) + 'T' + pad(dt.getHours()) + ':' + pad(dt.getMinutes());
                const getLocalDateString = dt => `${dt.getFullYear()}-${pad(dt.getMonth()+1)}-${pad(dt.getDate())}`;
                const liveEv = {
                    id: `live-${Date.now()}`,
                    title: project ? project.name : "Без проекта",
                    description: "",
                    date: getLocalDateString(now),
                    startTime: localIso(now),
                    endTime: localIso(new Date(now.getTime() + 60000)),
                    projectId: prj,
                    isLive: true,
                    type: 'project'
                };
                const calendarEvents = res.calendarEvents || [];
                calendarEvents.push(liveEv);
                chrome.storage.local.set({
                    stopwatch: {isRunning:true, startTimestamp: Date.now(), elapsed:0, liveEventId: liveEv.id, projectId: prj},
                    calendarEvents
                });
            });
        });
    };
    pauseBtn.onclick = function() {
        chrome.storage.local.get(['stopwatch', 'calendarEvents'], res=>{
            let sw = res.stopwatch||{};
            if (!sw.isRunning) return;
            let elapsed = (sw.elapsed||0) + (Date.now()-sw.startTimestamp);
            let calendarEvents = res.calendarEvents || [];
            if (sw.liveEventId) {
                const evIdx = calendarEvents.findIndex(ev => ev.id === sw.liveEventId);
                if (evIdx > -1) calendarEvents[evIdx].isLive = false;
            }
            chrome.storage.local.set({
                stopwatch:{...sw,isRunning:false,startTimestamp:null,elapsed,projectId: sw.projectId||null},
                calendarEvents
            });
        });
    };
    stopBtn.onclick = function() {
        chrome.storage.local.get(['stopwatch', 'calendarEvents'], res=>{
            let sw = res.stopwatch||{};
            let calendarEvents = res.calendarEvents || [];
            if (sw.liveEventId) {
                const evIdx = calendarEvents.findIndex(ev => ev.id === sw.liveEventId);
                if (evIdx > -1) calendarEvents[evIdx].isLive = false;
            }
            chrome.storage.local.set({
                stopwatch:{isRunning:false,startTimestamp:null,elapsed:0,liveEventId:null,projectId:null},
                calendarEvents
            });
        });
    };

    projectSelect.onchange = function() {
        chrome.storage.local.get('stopwatch', res=>{
            let sw = res.stopwatch||{};
            if (sw.isRunning || sw.elapsed) {
                chrome.storage.local.set({stopwatch:{isRunning:false,startTimestamp:null,elapsed:0,liveEventId:null,projectId: projectSelect.value}});
            }
            chrome.storage.local.set({selectedProjectId: projectSelect.value});
        });
    };
    calendarBtn.onclick = function () {
        chrome.tabs.create({ url: chrome.runtime.getURL("main_page.html") });
    };

    loadProjects();
    loadStopwatch();
    setInterval(updateDisplay, 1000);
});
